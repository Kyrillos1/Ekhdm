import { hasOwnProperty, isObjectLike } from './object';
export function isClass(value) {
    return typeof value === 'function' && hasOwnProperty(value, 'prototype');
}
export function isES2015Class(value) {
    return (typeof value === 'function' &&
        hasOwnProperty(value, 'prototype') &&
        value.toString().startsWith('class ') === true);
}
export function isInstance(value) {
    return isObjectLike(value) && isClass(value.constructor);
}
export function isES2015Instance(value) {
    return isObjectLike(value) && isES2015Class(value.constructor);
}
export function ensureClass(value) {
    if (isClass(value)) {
        return value;
    }
    if (isInstance(value)) {
        return value.constructor;
    }
    throw new Error(`Expected a class or an instance, but received a value of type '${typeof value}'`);
}
export function ensureInstance(value) {
    if (isInstance(value)) {
        return value;
    }
    if (isClass(value)) {
        return value.prototype;
    }
    throw new Error(`Expected a class or an instance, but received a value of type '${typeof value}'`);
}
export function assertIsClass(value) {
    if (!isClass(value)) {
        throw new Error(`Expected a class, but received a value of type '${typeof value}'`);
    }
}
export function assertIsES2015Class(value) {
    if (!isES2015Class(value)) {
        throw new Error(`Expected an ES2015 class, but received a value of type '${typeof value}'`);
    }
}
export function assertIsInstance(value) {
    if (!isInstance(value)) {
        throw new Error(`Expected an instance, but received a value of type '${typeof value}'`);
    }
}
export function assertIsES2015Instance(value) {
    if (!isES2015Instance(value)) {
        throw new Error(`Expected an instance of an ES2015 class, but received a value of type '${typeof value}'`);
    }
}
//# sourceMappingURL=class.js.map