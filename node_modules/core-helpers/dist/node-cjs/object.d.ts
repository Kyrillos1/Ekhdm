export declare type PropertyKey = string | number | symbol;
export declare function hasOwnProperty(object: Object, key: PropertyKey): boolean;
export declare function isPrototypeOf(object: Object, other: Object): boolean;
export declare function propertyIsEnumerable(object: Object, key: PropertyKey): boolean;
export declare function getPropertyDescriptor(object: Object, key: PropertyKey): PropertyDescriptor | undefined;
export declare function getInheritedPropertyDescriptor(object: Object, key: PropertyKey): PropertyDescriptor | undefined;
export declare type ObjectLike = {
    [key: string]: any;
};
export declare function isObjectLike(value: any): value is ObjectLike;
export declare type PlainObject = {
    [key: string]: any;
};
export declare function isPlainObject(value: any): value is PlainObject;
export declare function assertIsObjectLike(value: any): asserts value is ObjectLike;
export declare function assertIsPlainObject(value: any): asserts value is PlainObject;
export declare const breakSymbol: unique symbol;
export declare function forEachDeep(value: any, iteratee: (value: any, nameOrIndex?: string | number, objectOrArray?: {
    [key: string]: any;
} | Array<any>) => symbol | void, { _nameOrIndex, _objectOrArray }?: any): symbol | void;
export declare function someDeep(value: any, predicate: (value: any) => boolean): boolean;
export declare function deleteUndefinedProperties(value: any): any;
