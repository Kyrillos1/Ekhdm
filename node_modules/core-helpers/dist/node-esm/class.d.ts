import { Class } from 'type-fest';
export declare type Constructor<Class extends BaseConstructor = BaseConstructor> = BaseConstructor<InstanceType<Class>> & SuppressNew<Class>;
declare type BaseConstructor<Instance = {}> = new (...args: any[]) => Instance;
declare type SuppressNew<T> = {
    [K in keyof T]: T[K];
};
export declare type ClassLike = Function & {
    prototype: Object;
};
export declare function isClass(value: any): value is ClassLike;
export declare function isES2015Class(value: any): value is Class;
export declare type InstanceLike = {
    constructor: ClassLike;
};
export declare function isInstance(value: any): value is InstanceLike;
export declare type Instance = {
    constructor: Class;
};
export declare function isES2015Instance(value: any): value is Instance;
export declare function ensureClass(value: any): ClassLike;
export declare function ensureInstance(value: any): InstanceLike;
export declare function assertIsClass(value: any): asserts value is ClassLike;
export declare function assertIsES2015Class(value: any): asserts value is Class;
export declare function assertIsInstance(value: any): asserts value is InstanceLike;
export declare function assertIsES2015Instance(value: any): asserts value is Instance;
export {};
